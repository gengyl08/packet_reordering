#!/usr/bin/python
# Copyright 2010, Google, Inc
# author: Jiangbo Li (jiangbo@google.com)
# Sample Spitfire config file.

######################### Some Options ###################################
# the following stuff has a corresponding command line switch
# --kill
options.killall=True
# --copy
#options.copy_binary=True
# --path
#options.remote_path="/data/jiangbo/spitfire"
# --verbose
#options.verbose=True

###################### Some Common Flags #######################################
# ssh_user="prodbin2"    # By default, script use prodbin2 to ssh to the hosts
# binary_path="/data/firefly/bin" #default spitfire binary path in the hosts.
# --rpc_security_protocol= --rpc_use_default_security= --rpc_default_rate_acl=INSECURE

common_flags = "-stderrthreshold=3 "

common_master_flags = common_flags
common_master_flags += "--unresponsive_slave_threshold=60 "
#common_master_flags += "--logtostderr -v=-1 --vmodule=spitfire_master_impl=1 "

common_slave_flags = common_flags
#common_slave_flags += "--no_keepalive "
#common_slave_flags += "--logtostderr -v=-1 "
#common_slave_flags += "--vmodule=send-completion-queue=1 "
#common_slave_flags += "--vmodule=rdma_load_generator=1 "
#common_slave_flags += "--vmodule=spitfire_slave_impl=1 "

#################### Define the Master #######################################
# the config file is actually a python script.
# Define the Master
master = SpitfireMaster(host="bigmac-5-1", port=8888)
master.flags = common_master_flags
AddMaster(master)



hosts = ['bigmac-5-2', 'bigmac-9-2',]


################## One-to-One UD test  #################################
# In this example, by default, all hosts in the specified slave list
# don't send any traffic because the common flags
# has "--destinations none"
tcp_group = SpitfireGroup(master, name="TCP_LOAD", port=9990,
                           generator="tcp_load")
tcp_group.slaves = hosts
tcp_group.common_flags += ' --tcp_load_server_threads=10 '
tcp_group.common_flags += ' --tcp_load_client_threads=10 '
tcp_group.common_flags += ' --tcp_load_report_latency '
tcp_group.common_flags += common_slave_flags
AddGroup(tcp_group)
